#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[16];
in vec3 toEnvLightVector[2];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform sampler2D modelTexture;
uniform vec3 lightColor[16];
uniform vec3 envLightColor[2];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void) {
    vec4 blendMapColor = texture(blendMap, pass_textureCoordinates);
    float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec2 tiledCoords = pass_textureCoordinates * 40;
    vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
    vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
    vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
    vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

	vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for (int i = 0; i < 2; i++) {
        float distance = length(toEnvLightVector[i]);
        float attFactor = clamp(10.0 / distance, 0.0, 1.0);
        vec3 unitLightVector = normalize(toEnvLightVector[i]);
        float nDotl = dot(unitNormal, unitLightVector);
        float brightness = max(nDotl, 0.0);
        vec3 lightDirection = -unitLightVector;

        // Blinn-Phong specular
        vec3 halfDir = normalize(-lightDirection + unitVectorToCamera);
        float specAngle = max(dot(halfDir, unitNormal), 0.0);
        float dampedFactor = pow(specAngle, shineDamper * 4.0);

        totalDiffuse += (brightness * envLightColor[i]) * attFactor;
        totalSpecular += (dampedFactor * reflectivity * envLightColor[i]) * attFactor;
    }

    for (int i = 0; i < 16; i++) {
        float distance = length(toLightVector[i]);
        float attFactor = clamp(10.0 / distance, 0.0, 1.0);
        vec3 unitLightVector = normalize(toLightVector[i]);
        float nDotl = dot(unitNormal, unitLightVector);
        float brightness = max(nDotl, 0.0);
        vec3 lightDirection = -unitLightVector;

        // Blinn-Phong specular
        vec3 halfDir = normalize(-lightDirection + unitVectorToCamera);
        float specAngle = max(dot(halfDir, unitNormal), 0.0);
        float dampedFactor = pow(specAngle, shineDamper * 4.0);

        totalDiffuse += (brightness * lightColor[i]) * attFactor;
        totalSpecular += (dampedFactor * reflectivity * lightColor[i]) * attFactor;
    }
    totalDiffuse = max(totalDiffuse, 0.2);

	out_Color = vec4(totalDiffuse, 1.0) * totalColor + vec4(totalSpecular, 1.0);
    out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
}